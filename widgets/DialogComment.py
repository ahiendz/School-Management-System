from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QPushButton
from PyQt6.QtCore import Qt
from PyQt6 import uic

class DialogComment(QDialog):
    def __init__(self, student_name, hocki, old_comment, scores):
        super().__init__()
        uic.loadUi("Ui\Dialog_nhanxet_hocsinh.ui", self)

        self.student_name = student_name
        self.hocki = hocki
        self.old_comment = old_comment
        self.scores = scores
        print("old_comment l√† :", self.old_comment)

        self.setWindowTitle("Nh·∫≠n x√©t h·ªçc sinh")
        
        self.setupUI()


    def setupUI(self):
        #set casc thong  tin
        self.name_label.setText(self.student_name)
        self.hocki_label.setText(self.hocki)
        self.nx_edit.setText(self.old_comment)

        self.miNgLineEdit.setText("   ".join(str(x) if x is not None else "" for x in self.scores["oral_scores"]))
        self.PhTLineEdit.setText("   ".join(str(x) if x is not None else "" for x in self.scores["quiz_15min"]))
        self.TiTLineEdit.setText("   ".join(str(x) if x is not None else "" for x in self.scores["test_1period"]))
        self.giAKLineEdit.setText(str(self.scores["midterm"]) if self.scores["midterm"] is not None else "")
        self.cuIKLineEdit.setText(str(self.scores["final"]) if self.scores["final"] is not None else "")

        # set c√°c qline l√† ko th·ªÉ edit
        self.miNgLineEdit.setReadOnly(True)
        self.PhTLineEdit.setReadOnly(True)
        self.TiTLineEdit.setReadOnly(True)
        self.giAKLineEdit.setReadOnly(True)
        self.cuIKLineEdit.setReadOnly(True)

        self.nxot_btn.clicked.connect(lambda: self.save_comment("T·ªët"))
        self.nxccg_btn.clicked.connect(lambda: self.save_comment("C·∫ßn c·ªë g·∫Øng"))
        self.nxtb_btn.clicked.connect(lambda: self.save_comment("Ti·∫øn b·ªô"))

    def save_comment(self, option):
        if option == "T·ªët":
            text = "Em h·ªçc t·ªët, chƒÉm ch·ªâ v√† c√≥ th√°i ƒë·ªô h·ªçc t·∫≠p nghi√™m t√∫c. C√¥/Th·∫ßy r·∫•t h√†i l√≤ng v·ªõi s·ª± c·ªë g·∫Øng c·ªßa em üíØ"
            self.nx_edit.setText(text)
        elif option == "C·∫ßn c·ªë g·∫Øng":
            text = "Em c√≥ ti·ªÅm nƒÉng, nh∆∞ng c·∫ßn t·∫≠p trung v√† n·ªó l·ª±c h∆°n n·ªØa ƒë·ªÉ ph√°t huy h·∫øt kh·∫£ nƒÉng c·ªßa m√¨nh. C·ªë l√™n nha üí™"
            self.nx_edit.setText(text)
        elif option == "Ti·∫øn b·ªô":
            text = "Em ƒë√£ c√≥ s·ª± ti·∫øn b·ªô r√µ r·ªát trong th·ªùi gian qua. C·ªë g·∫Øng duy tr√¨ v√† ph√°t tri·ªÉn h∆°n n·ªØa nh√©, r·∫•t ƒë√°ng khen üëè"
            self.nx_edit.setText(text)

    def get_comment(self):
        return self.nx_edit.text()